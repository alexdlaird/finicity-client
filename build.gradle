apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

def projectGroup = 'com.finicityclient'
def projectArtifactId = 'finicityclient'
def projectVersion = '1.0.0-SNAPSHOT'

def sonatypeUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : System.getenv('sonatypeUsername')
def sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('sonatypePassword')

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Finicity Client'
                packaging 'jar'
                description 'A Finicity Client in Java for communicating with the Finicity API'
                url 'https://github.com/alexdlaird/finicity-client'

                scm {
                    url 'scm:git@github.com:alexdlaird/finicity-client.git'
                    connection 'scm:git@github.com:alexdlaird/finicity-client.git'
                    developerConnection 'scm:git@github.com:alexdlaird/finicity-client.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://github.com/alexdlaird/finicity-client/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'alexdlaird'
                        name 'Alex Laird'
                    }
                }
            }
        }
    }
}

mainClassName = 'com.finicityclient.DefaultFinicityClient'
jar {
    group = projectGroup
    baseName = projectArtifactId
    version = projectVersion

    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('out')
        testOutputDir = file('out-test')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

jacocoTestReport {
    group = 'Reporting'
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

task coverage(dependsOn: [jacocoTestReport]) {
    group = 'Reporting'
    description = 'Generate a code coverage report'
}
coverage.mustRunAfter test

task buildAll(dependsOn: [test, coverage, javadoc, jar]) {
    group = 'Verification'
    description = 'Verification to run before building'
}

repositories {
    jcenter()
}

dependencies {
    // Data and Serialization
    compile('org.simpleframework:simple-xml:2.7.1')

    // Test
    testCompile('org.unitils:unitils-core:3.4.2')
}
